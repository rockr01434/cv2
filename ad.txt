<?php
// custom_panel.php - Custom OpenLiteSpeed Management Panel
session_start();

// Configuration
$CONFIG = [
    'panel_port' => 7869,
    'lsws_path' => '/usr/local/lsws',
    'vhosts_path' => '/usr/local/lsws/conf/vhosts',
    'www_path' => '/home',
    'config_file' => '/usr/local/lsws/conf/httpd_config.conf',
    'filebrowser_port' => 9999,
    'admin_user' => 'admin',
    'admin_pass' => 'your_secure_password_here' // Change this!
];

// Authentication
if (!isset($_SESSION['admin_logged_in']) && $_GET['action'] !== 'login') {
    showLogin();
    exit;
}

if (isset($_GET['action']) && $_GET['action'] === 'login') {
    if ($_POST['username'] === $CONFIG['admin_user'] && $_POST['password'] === $CONFIG['admin_pass']) {
        $_SESSION['admin_logged_in'] = true;
        $_SESSION['username'] = $_POST['username'];
        header('Location: ' . $_SERVER['PHP_SELF']);
        exit;
    } else {
        showLogin('Invalid credentials');
        exit;
    }
}

if (isset($_GET['action']) && $_GET['action'] === 'logout') {
    session_destroy();
    header('Location: ' . $_SERVER['PHP_SELF']);
    exit;
}

// Handle AJAX requests
if (isset($_GET['ajax'])) {
    header('Content-Type: application/json');
    
    switch ($_GET['ajax']) {
        case 'domains':
            echo json_encode(getDomainList());
            break;
        case 'stats':
            echo json_encode(getSystemStats());
            break;
        case 'services':
            echo json_encode(getServiceStatus());
            break;
        case 'create_domain':
            echo json_encode(createDomain($_POST['domain']));
            break;
        case 'delete_domain':
            echo json_encode(deleteDomain($_POST['domain']));
            break;
        case 'bulk_create':
            echo json_encode(bulkCreateDomains($_POST['domains']));
            break;
        case 'restart_service':
            echo json_encode(restartService($_POST['service']));
            break;
        case 'change_php_bulk':
            echo json_encode(changePHPVersionBulk($_POST['php_version'], $_POST['domains'] ?? 'all'));
            break;
        case 'change_php_single':
            echo json_encode(changePHPVersionSingle($_POST['domain'], $_POST['php_version']));
            break;
        case 'ssl_cert':
            echo json_encode(generateSSLCert($_POST['domain']));
            break;
        case 'get_file_manager_url':
            echo json_encode(getFileManagerURL());
            break;
    }
    exit;
}

// Functions
function showLogin($error = '') {
    ?>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Custom Server Panel - Login</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .login-container {
                background: rgba(255, 255, 255, 0.95);
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
                backdrop-filter: blur(10px);
                width: 100%;
                max-width: 400px;
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            .login-header {
                text-align: center;
                margin-bottom: 30px;
            }
            .login-header h1 {
                color: #4a5568;
                margin-bottom: 10px;
                font-size: 28px;
            }
            .login-header p {
                color: #718096;
                font-size: 14px;
            }
            .form-group {
                margin-bottom: 20px;
            }
            .form-group label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: #4a5568;
            }
            .form-control {
                width: 100%;
                padding: 12px 16px;
                border: 2px solid #e2e8f0;
                border-radius: 10px;
                font-size: 14px;
                transition: all 0.3s ease;
                background: white;
            }
            .form-control:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }
            .btn {
                width: 100%;
                padding: 12px 24px;
                border: none;
                border-radius: 10px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                transition: all 0.3s ease;
            }
            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            }
            .error {
                color: #e53e3e;
                text-align: center;
                margin-bottom: 20px;
                padding: 10px;
                background: rgba(229, 62, 62, 0.1);
                border-radius: 5px;
                border: 1px solid rgba(229, 62, 62, 0.2);
            }
        </style>
    </head>
    <body>
        <div class="login-container">
            <div class="login-header">
                <h1>Custom Server Panel</h1>
                <p>OpenLiteSpeed Management Interface</p>
            </div>
            <?php if ($error): ?>
                <div class="error"><?php echo htmlspecialchars($error); ?></div>
            <?php endif; ?>
            <form method="POST" action="?action=login">
                <div class="form-group">
                    <label for="username">Username</label>
                    <input type="text" id="username" name="username" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" class="form-control" required>
                </div>
                <button type="submit" class="btn">Login to Panel</button>
            </form>
        </div>
    </body>
    </html>
    <?php
}

function getDomainList() {
    global $CONFIG;
    $domains = [];
    
    if (is_dir($CONFIG['vhosts_path'])) {
        $dirs = scandir($CONFIG['vhosts_path']);
        foreach ($dirs as $dir) {
            if ($dir !== '.' && $dir !== '..' && $dir !== 'Example' && is_dir($CONFIG['vhosts_path'] . '/' . $dir)) {
                $domain_path = $CONFIG['www_path'] . '/' . $dir;
                $ssl_cert = $CONFIG['vhosts_path'] . '/' . $dir . '/ssl/' . $dir . '.crt';
                $vhconf = $CONFIG['vhosts_path'] . '/' . $dir . '/vhconf.conf';
                
                // Detect current PHP version
                $phpVersion = 'Unknown';
                if (file_exists($vhconf)) {
                    $config = file_get_contents($vhconf);
                    if (preg_match('/lsphp(\d+)/', $config, $matches)) {
                        $phpVersion = 'PHP ' . substr($matches[1], 0, 1) . '.' . substr($matches[1], 1);
                    }
                }
                
                $domains[] = [
                    'name' => $dir,
                    'path' => $domain_path,
                    'ssl' => file_exists($ssl_cert),
                    'status' => is_dir($domain_path) ? 'active' : 'inactive',
                    'size' => is_dir($domain_path) ? formatBytes(getDirSize($domain_path)) : '0 B',
                    'php_version' => $phpVersion
                ];
            }
        }
    }
    
    return $domains;
}

function getSystemStats() {
    $stats = [];
    
    // Server uptime
    $uptime = shell_exec('uptime -p 2>/dev/null || echo "Unknown"');
    $stats['uptime'] = trim($uptime);
    
    // Memory usage
    $memory = shell_exec('free -m | grep Mem');
    preg_match('/Mem:\s+(\d+)\s+(\d+)/', $memory, $matches);
    $stats['memory'] = [
        'total' => $matches[1] ?? 0,
        'used' => $matches[2] ?? 0,
        'percentage' => round(($matches[2] ?? 0) / ($matches[1] ?? 1) * 100, 2)
    ];
    
    // Disk usage
    $disk = shell_exec('df -h / | tail -1');
    preg_match('/(\d+%)\s+(\S+)$/', $disk, $matches);
    $stats['disk'] = [
        'usage' => $matches[1] ?? '0%',
        'available' => $matches[2] ?? '0G'
    ];
    
    // Load average
    $load = shell_exec('uptime | grep -o "load average: .*" | cut -d" " -f3');
    $stats['load'] = trim($load, ',');
    
    // PHP versions available
    $phpVersions = [];
    $phpDirs = glob('/usr/local/lsws/lsphp*', GLOB_ONLYDIR);
    foreach ($phpDirs as $dir) {
        if (preg_match('/lsphp(\d+)$/', $dir, $matches)) {
            $version = $matches[1];
            $phpVersions[] = [
                'version' => $version,
                'name' => 'PHP ' . substr($version, 0, 1) . '.' . substr($version, 1),
                'path' => $dir
            ];
        }
    }
    $stats['php_versions'] = $phpVersions;
    
    return $stats;
}

function getServiceStatus() {
    $services = ['lsws', 'filebrowser', 'httpd', 'mysql', 'mariadb'];
    $status = [];
    
    foreach ($services as $service) {
        $result = shell_exec("systemctl is-active $service 2>/dev/null");
        $status[$service] = trim($result) === 'active' ? 'running' : 'stopped';
    }
    
    return $status;
}

function createDomain($domain) {
    if (empty($domain) || !filter_var($domain, FILTER_VALIDATE_DOMAIN)) {
        return ['success' => false, 'message' => 'Invalid domain name'];
    }
    
    $output = shell_exec("sudo /usr/local/bin/star -create " . escapeshellarg($domain) . " 2>&1");
    
    if (strpos($output, 'successfully') !== false) {
        return ['success' => true, 'message' => "Domain $domain created successfully"];
    } else {
        return ['success' => false, 'message' => 'Failed to create domain: ' . $output];
    }
}

function deleteDomain($domain) {
    if (empty($domain)) {
        return ['success' => false, 'message' => 'Domain name required'];
    }
    
    $output = shell_exec("sudo /usr/local/bin/star -delete " . escapeshellarg($domain) . " 2>&1");
    
    if (strpos($output, 'deleted') !== false) {
        return ['success' => true, 'message' => "Domain $domain deleted successfully"];
    } else {
        return ['success' => false, 'message' => 'Failed to delete domain: ' . $output];
    }
}

function bulkCreateDomains($domains) {
    if (empty($domains)) {
        return ['success' => false, 'message' => 'No domains provided'];
    }
    
    $domainList = array_filter(array_map('trim', explode("\n", $domains)));
    $results = [];
    
    foreach ($domainList as $domain) {
        if (filter_var($domain, FILTER_VALIDATE_DOMAIN)) {
            $result = createDomain($domain);
            $results[] = $domain . ': ' . ($result['success'] ? 'Created' : 'Failed');
        } else {
            $results[] = $domain . ': Invalid domain';
        }
    }
    
    return ['success' => true, 'message' => implode("\n", $results)];
}

function changePHPVersionBulk($phpVersion, $domains = 'all') {
    global $CONFIG;
    
    $allowedVersions = ['73', '74', '80', '81', '82'];
    if (!in_array($phpVersion, $allowedVersions)) {
        return ['success' => false, 'message' => 'Invalid PHP version'];
    }
    
    // Get domains list
    if ($domains === 'all') {
        $domainList = getDomainList();
        $targetDomains = array_column($domainList, 'name');
    } else {
        $targetDomains = array_filter(array_map('trim', explode(',', $domains)));
    }
    
    $results = [];
    $successCount = 0;
    
    foreach ($targetDomains as $domain) {
        $vhostConfig = $CONFIG['vhosts_path'] . '/' . $domain . '/vhconf.conf';
        
        if (file_exists($vhostConfig)) {
            $config = file_get_contents($vhostConfig);
            
            // Replace PHP version in multiple places
            $config = preg_replace('/lsphp\d+/', 'lsphp' . $phpVersion, $config);
            $config = preg_replace('/\/usr\/local\/lsws\/lsphp\d+/', '/usr/local/lsws/lsphp' . $phpVersion, $config);
            
            if (file_put_contents($vhostConfig, $config)) {
                $results[] = "$domain: Updated to PHP $phpVersion";
                $successCount++;
            } else {
                $results[] = "$domain: Failed to update config";
            }
        } else {
            $results[] = "$domain: Config file not found";
        }
    }
    
    if ($successCount > 0) {
        shell_exec("sudo systemctl restart lsws 2>/dev/null");
        $message = "Updated $successCount domains to PHP $phpVersion\n" . implode("\n", $results);
        return ['success' => true, 'message' => $message];
    } else {
        return ['success' => false, 'message' => 'No domains were updated:\n' . implode("\n", $results)];
    }
}

function changePHPVersionSingle($domain, $phpVersion) {
    global $CONFIG;
    
    $allowedVersions = ['73', '74', '80', '81', '82'];
    if (!in_array($phpVersion, $allowedVersions)) {
        return ['success' => false, 'message' => 'Invalid PHP version'];
    }
    
    $vhostConfig = $CONFIG['vhosts_path'] . '/' . $domain . '/vhconf.conf';
    
    if (!file_exists($vhostConfig)) {
        return ['success' => false, 'message' => 'Domain configuration not found'];
    }
    
    $config = file_get_contents($vhostConfig);
    $config = preg_replace('/lsphp\d+/', 'lsphp' . $phpVersion, $config);
    $config = preg_replace('/\/usr\/local\/lsws\/lsphp\d+/', '/usr/local/lsws/lsphp' . $phpVersion, $config);
    
    if (file_put_contents($vhostConfig, $config)) {
        shell_exec("sudo systemctl restart lsws 2>/dev/null");
        return ['success' => true, 'message' => "PHP version changed to $phpVersion for $domain"];
    } else {
        return ['success' => false, 'message' => 'Failed to update configuration'];
    }
}

function restartService($service) {
    $allowedServices = ['lsws', 'filebrowser', 'httpd', 'mysql', 'mariadb'];
    
    if (!in_array($service, $allowedServices)) {
        return ['success' => false, 'message' => 'Service not allowed'];
    }
    
    $output = shell_exec("sudo systemctl restart $service 2>&1");
    
    if (empty($output)) {
        return ['success' => true, 'message' => "Service $service restarted successfully"];
    } else {
        return ['success' => false, 'message' => 'Failed to restart service: ' . $output];
    }
}

function generateSSLCert($domain) {
    $output = shell_exec("sudo certbot --nginx -d " . escapeshellarg($domain) . " --non-interactive --agree-tos --email admin@$domain 2>&1");
    
    if (strpos($output, 'Successfully') !== false) {
        return ['success' => true, 'message' => "SSL certificate generated for $domain"];
    } else {
        return ['success' => false, 'message' => 'Failed to generate SSL certificate: ' . $output];
    }
}

function getFileManagerURL() {
    global $CONFIG;
    
    // Configure filebrowser for proxy authentication
    $username = $_SESSION['username'] ?? 'admin';
    
    // Set up proxy header authentication
    $commands = [
        "filebrowser -d /var/lib/filebrowser/filebrowser.db config set --auth.method=proxy",
        "filebrowser -d /var/lib/filebrowser/filebrowser.db config set --auth.header=X-Remote-User",
        "sudo systemctl restart filebrowser"
    ];
    
    foreach ($commands as $command) {
        shell_exec($command . " 2>/dev/null");
    }
    
    $serverIP = $_SERVER['HTTP_HOST'];
    $port = $CONFIG['filebrowser_port'];
    
    return [
        'success' => true,
        'url' => "http://$serverIP:$port",
        'proxy_header' => 'X-Remote-User',
        'username' => $username
    ];
}

function formatBytes($size, $precision = 2) {
    $units = ['B', 'KB', 'MB', 'GB', 'TB'];
    
    for ($i = 0; $size >= 1024 && $i < count($units) - 1; $i++) {
        $size /= 1024;
    }
    
    return round($size, $precision) . ' ' . $units[$i];
}

function getDirSize($directory) {
    $size = 0;
    if (is_dir($directory)) {
        $files = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($directory, RecursiveDirectoryIterator::SKIP_DOTS),
            RecursiveIteratorIterator::LEAVES_ONLY
        );
        
        foreach ($files as $file) {
            $size += $file->getSize();
        }
    }
    
    return $size;
}

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Server Management Panel</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 15px 30px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            color: white;
            font-size: 24px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .header h1::before {
            content: "🚀";
            font-size: 28px;
        }

        .header .user-info {
            color: rgba(255, 255, 255, 0.9);
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .container {
            display: flex;
            min-height: calc(100vh - 70px);
        }

        .sidebar {
            width: 280px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-right: 1px solid rgba(255, 255, 255, 0.2);
            padding: 20px;
        }

        .nav-menu {
            list-style: none;
        }

        .nav-item {
            margin-bottom: 8px;
        }

        .nav-link {
            display: block;
            padding: 15px 20px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            border-radius: 10px;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .nav-link:hover,
        .nav-link.active {
            background: rgba(255, 255, 255, 0.2);
            transform: translateX(5px);
        }

        .nav-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s;
        }

        .nav-link:hover::before {
            left: 100%;
        }

        .nav-link i {
            margin-right: 10px;
            width: 20px;
        }

        .main-content {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
        }

        .content-section {
            display: none;
            animation: fadeIn 0.5s ease-in-out;
        }

        .content-section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .card h2 {
            color: #4a5568;
            margin-bottom: 20px;
            font-size: 24px;
            position: relative;
            padding-bottom: 10px;
        }

        .card h2::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 50px;
            height: 3px;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 2px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }

        .stat-card h3 {
            font-size: 32px;
            margin-bottom: 5px;
        }

        .stat-card p {
            opacity: 0.9;
            font-size: 14px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #4a5568;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: white;
        }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-danger {
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            color: white;
        }

        .btn-success {
            background: linear-gradient(135deg, #51cf66, #40c057);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(135deg, #ffd43b, #fab005);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .domain-list {
            margin-top: 20px;
        }

        .domain-item {
            background: #f8f9fa;
            padding: 20px;
            margin-bottom: 15px;
            border-radius: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
        }

        .domain-item:hover {
            background: #e9ecef;
            border-left-color: #667eea;
            transform: translateX(5px);
        }

        .domain-info {
            flex: 1;
        }

        .domain-name {
            font-weight: 600;
            color: #4a5568;
            margin-bottom: 5px;
            font-size: 16px;
        }

        .domain-meta {
            display: flex;
            gap: 15px;
            font-size: 12px;
            color: #666;
            flex-wrap: wrap;
        }

        .domain-actions {
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-active {
            background: #d4edda;
            color: #155724;
        }

        .status-inactive {
            background: #f8d7da;
            color: #721c24;
        }

        .ssl-badge {
            background: #d1ecf1;
            color: #0c5460;
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 600;
        }

        .php-badge {
            background: #e2e3e5;
            color: #383d41;
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 600;
        }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 10px;
            display: none;
        }

        .alert.show {
            display: block;
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .service-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 10px;
            margin-bottom: 10px;
        }

        .service-status {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }

        .status-running {
            background: #28a745;
        }

        .status-stopped {
            background: #dc3545;
        }

        .php-version-selector {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-bottom: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            border-left: 4px solid #667eea;
        }

        .php-version-selector select {
            padding: 10px 15px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            background: white;
            font-size: 14px;
            min-width: 120px;
        }

        .php-version-selector .btn {
            margin: 0;
        }

        .file-manager-embed {
            width: 100%;
            height: 600px;
            border: none;
            border-radius: 10px;
            background: white;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .two-column {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .three-column {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
        }

        .bulk-php-section {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 20px;
        }

        .bulk-php-section h3 {
            margin-bottom: 20px;
            font-size: 20px;
        }

        .bulk-php-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }

        .bulk-php-controls select {
            padding: 10px 15px;
            border: none;
            border-radius: 8px;
            background: white;
            color: #333;
            font-size: 14px;
            min-width: 150px;
        }

        .bulk-php-controls .btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid white;
        }

        .bulk-php-controls .btn:hover {
            background: white;
            color: #667eea;
        }

        @media (max-width: 768px) {
            .two-column,
            .three-column {
                grid-template-columns: 1fr;
            }
            
            .sidebar {
                width: 100%;
                position: fixed;
                top: 70px;
                left: -100%;
                height: calc(100vh - 70px);
                z-index: 1000;
                transition: left 0.3s ease;
            }
            
            .sidebar.open {
                left: 0;
            }
            
            .main-content {
                padding: 20px;
            }
            
            .domain-actions {
                flex-direction: column;
                align-items: stretch;
            }
            
            .domain-actions .btn {
                margin: 2px 0;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Custom Server Panel</h1>
        <div class="user-info">
            <span>Welcome, <?php echo htmlspecialchars($_SESSION['username'] ?? 'Admin'); ?></span>
            <a href="?action=logout" class="btn btn-danger" style="padding: 8px 16px; font-size: 12px;">Logout</a>
        </div>
    </div>

    <div class="container">
        <div class="sidebar">
            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="#" class="nav-link active" data-section="dashboard">
                        <i>📊</i> Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" data-section="domains">
                        <i>🌐</i> Domain Management
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" data-section="php-versions">
                        <i>🐘</i> PHP Versions
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" data-section="services">
                        <i>⚙️</i> Services
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" data-section="file-manager">
                        <i>📁</i> File Manager
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" data-section="ssl-certs">
                        <i>🔒</i> SSL Certificates
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" data-section="system-logs">
                        <i>📋</i> System Logs
                    </a>
                </li>
            </ul>
        </div>

        <div class="main-content">
            <div id="alert-container"></div>

            <!-- Dashboard Section -->
            <div class="content-section active" id="dashboard">
                <div class="card">
                    <h2>System Overview</h2>
                    <div class="stats-grid" id="stats-grid">
                        <div class="stat-card">
                            <h3 id="domain-count">0</h3>
                            <p>Total Domains</p>
                        </div>
                        <div class="stat-card">
                            <h3 id="memory-usage">0%</h3>
                            <p>Memory Usage</p>
                        </div>
                        <div class="stat-card">
                            <h3 id="disk-usage">0%</h3>
                            <p>Disk Usage</p>
                        </div>
                        <div class="stat-card">
                            <h3 id="uptime">0d</h3>
                            <p>Server Uptime</p>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h2>Quick Actions</h2>
                    <button class="btn btn-primary" onclick="restartLiteSpeed()">🔄 Restart LiteSpeed</button>
                    <button class="btn btn-success" onclick="showSection('domains')">🌐 Manage Domains</button>
                    <button class="btn btn-warning" onclick="showSection('file-manager')">📁 File Manager</button>
                    <button class="btn btn-primary" onclick="showSection('services')">⚙️ Services</button>
                </div>
            </div>

            <!-- Domains Section -->
            <div class="content-section" id="domains">
                <div class="two-column">
                    <div class="card">
                        <h2>Add New Domain</h2>
                        <form id="domain-form">
                            <div class="form-group">
                                <label for="domain-name">Domain Name</label>
                                <input type="text" id="domain-name" class="form-control" placeholder="example.com" required>
                            </div>
                            <button type="submit" class="btn btn-primary">🌐 Create Domain</button>
                        </form>
                    </div>

                    <div class="card">
                        <h2>Bulk Add Domains</h2>
                        <form id="bulk-domain-form">
                            <div class="form-group">
                                <label for="bulk-domains">Domains (one per line)</label>
                                <textarea id="bulk-domains" class="form-control" rows="5" placeholder="example1.com&#10;example2.com&#10;example3.com" required></textarea>
                            </div>
                            <button type="submit" class="btn btn-success">🚀 Create All Domains</button>
                        </form>
                    </div>
                </div>

                <div class="card">
                    <h2>Domain List</h2>
                    <div class="loading" id="domains-loading">
                        <div class="spinner"></div>
                        <p>Loading domains...</p>
                    </div>
                    <div class="domain-list" id="domain-list"></div>
                </div>
            </div>

            <!-- PHP Versions Section -->
            <div class="content-section" id="php-versions">
                <div class="card">
                    <div class="bulk-php-section">
                        <h3>🐘 Bulk PHP Version Change</h3>
                        <p>Apply PHP version to all domains at once</p>
                        <div class="bulk-php-controls">
                            <label>Select PHP Version:</label>
                            <select id="bulk-php-version">
                                <option value="73">PHP 7.3</option>
                                <option value="74">PHP 7.4</option>
                                <option value="80">PHP 8.0</option>
                                <option value="81">PHP 8.1</option>
                                <option value="82">PHP 8.2</option>
                            </select>
                            <button class="btn" onclick="changePHPVersionBulk()">🚀 Apply to All Domains</button>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h2>Individual PHP Version Management</h2>
                    <p>Change PHP version for specific domains:</p>
                    <div class="loading" id="php-loading">
                        <div class="spinner"></div>
                        <p>Loading PHP settings...</p>
                    </div>
                    <div id="php-domains-list"></div>
                </div>
            </div>

            <!-- Services Section -->
            <div class="content-section" id="services">
                <div class="card">
                    <h2>Service Management</h2>
                    <div class="loading" id="services-loading">
                        <div class="spinner"></div>
                        <p>Loading services...</p>
                    </div>
                    <div id="services-list"></div>
                </div>
            </div>

            <!-- File Manager Section -->
            <div class="content-section" id="file-manager">
                <div class="card">
                    <h2>📁 File Manager</h2>
                    <p>Manage your server files with proxy authentication enabled.</p>
                    <div id="file-manager-container">
                        <p>Loading file manager...</p>
                    </div>
                </div>
            </div>

            <!-- SSL Certificates Section -->
            <div class="content-section" id="ssl-certs">
                <div class="card">
                    <h2>SSL Certificate Management</h2>
                    <form id="ssl-form">
                        <div class="form-group">
                            <label for="ssl-domain">Domain</label>
                            <select id="ssl-domain" class="form-control" required>
                                <option value="">Select domain...</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-success">🔒 Generate SSL Certificate</button>
                    </form>
                    
                    <div class="domain-list" id="ssl-domains-list"></div>
                </div>
            </div>

            <!-- System Logs Section -->
            <div class="content-section" id="system-logs">
                <div class="card">
                    <h2>System Logs</h2>
                    <div class="form-group">
                        <label for="log-type">Log Type</label>
                        <select id="log-type" class="form-control" onchange="loadLogs()">
                            <option value="lsws">LiteSpeed Error Log</option>
                            <option value="lsws-access">LiteSpeed Access Log</option>
                            <option value="system">System Log</option>
                            <option value="php">PHP Error Log</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary" onclick="loadLogs()">🔄 Refresh Logs</button>
                        <button class="btn btn-warning" onclick="clearLogs()">🗑️ Clear Logs</button>
                    </div>
                    <div id="logs-container" style="background: #1e1e1e; color: #fff; padding: 20px; border-radius: 10px; font-family: monospace; max-height: 400px; overflow-y: auto;">
                        <pre id="logs-content">Select a log type and click refresh to view logs...</pre>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentSection = 'dashboard';
        let domainsData = [];
        let servicesData = {};
        let availablePHPVersions = [];

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboard();
            setupEventListeners();
            
            // Auto-refresh stats every 30 seconds
            setInterval(loadStats, 30000);
        });

        // Event listeners
        function setupEventListeners() {
            // Navigation
            document.querySelectorAll('.nav-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const section = this.dataset.section;
                    showSection(section);
                });
            });

            // Domain form
            document.getElementById('domain-form').addEventListener('submit', function(e) {
                e.preventDefault();
                const domain = document.getElementById('domain-name').value.trim();
                if (domain) {
                    createDomain(domain);
                }
            });

            // Bulk domain form
            document.getElementById('bulk-domain-form').addEventListener('submit', function(e) {
                e.preventDefault();
                const domains = document.getElementById('bulk-domains').value.trim();
                if (domains) {
                    bulkCreateDomains(domains);
                }
            });

            // SSL form
            document.getElementById('ssl-form').addEventListener('submit', function(e) {
                e.preventDefault();
                const domain = document.getElementById('ssl-domain').value;
                if (domain) {
                    generateSSL(domain);
                }
            });
        }

        // Navigation functions
        function showSection(section) {
            // Update navigation
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            document.querySelector(`[data-section="${section}"]`).classList.add('active');

            // Update content
            document.querySelectorAll('.content-section').forEach(sec => {
                sec.classList.remove('active');
            });
            document.getElementById(section).classList.add('active');

            currentSection = section;

            // Load section-specific data
            switch(section) {
                case 'dashboard':
                    loadDashboard();
                    break;
                case 'domains':
                    loadDomains();
                    break;
                case 'php-versions':
                    loadPHPVersions();
                    break;
                case 'services':
                    loadServices();
                    break;
                case 'file-manager':
                    loadFileManager();
                    break;
                case 'ssl-certs':
                    loadSSLCerts();
                    break;
            }
        }

        // Dashboard functions
        function loadDashboard() {
            loadStats();
            loadDomains();
        }

        function loadStats() {
            fetch('?ajax=stats')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('memory-usage').textContent = data.memory.percentage + '%';
                    document.getElementById('disk-usage').textContent = data.disk.usage;
                    document.getElementById('uptime').textContent = data.uptime;
                    availablePHPVersions = data.php_versions || [];
                })
                .catch(error => {
                    console.error('Error loading stats:', error);
                });
        }

        // Domain functions
        function loadDomains() {
            showLoading('domains-loading');
            
            fetch('?ajax=domains')
                .then(response => response.json())
                .then(data => {
                    domainsData = data;
                    document.getElementById('domain-count').textContent = data.length;
                    renderDomains(data);
                    populateSSLDomains(data);
                    hideLoading('domains-loading');
                })
                .catch(error => {
                    console.error('Error loading domains:', error);
                    hideLoading('domains-loading');
                });
        }

        function renderDomains(domains) {
            const container = document.getElementById('domain-list');
            container.innerHTML = '';

            if (domains.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #666; padding: 40px;">No domains found. Create your first domain above.</p>';
                return;
            }

            domains.forEach(domain => {
                const domainItem = document.createElement('div');
                domainItem.className = 'domain-item';
                domainItem.innerHTML = `
                    <div class="domain-info">
                        <div class="domain-name">${domain.name}</div>
                        <div class="domain-meta">
                            <span class="status-badge ${domain.status === 'active' ? 'status-active' : 'status-inactive'}">
                                ${domain.status}
                            </span>
                            ${domain.ssl ? '<span class="ssl-badge">🔒 SSL</span>' : '<span class="status-badge status-inactive">No SSL</span>'}
                            <span class="php-badge">${domain.php_version}</span>
                            <span>📁 ${domain.size}</span>
                        </div>
                    </div>
                    <div class="domain-actions">
                        <button class="btn btn-primary" onclick="window.open('http://${domain.name}', '_blank')">🌐 HTTP</button>
                        <button class="btn btn-success" onclick="window.open('https://${domain.name}', '_blank')">🔒 HTTPS</button>
                        <button class="btn btn-danger" onclick="deleteDomain('${domain.name}')">🗑️ Delete</button>
                    </div>
                `;
                container.appendChild(domainItem);
            });
        }

        function createDomain(domain) {
            showAlert('Creating domain...', 'info');
            
            const formData = new FormData();
            formData.append('domain', domain);
            
            fetch('?ajax=create_domain', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(data.message, 'success');
                    document.getElementById('domain-name').value = '';
                    loadDomains();
                } else {
                    showAlert(data.message, 'error');
                }
            })
            .catch(error => {
                showAlert('Error creating domain: ' + error.message, 'error');
            });
        }

        function deleteDomain(domain) {
            if (confirm(`⚠️ Are you sure you want to delete ${domain}?\n\nThis will permanently remove:\n• Website files\n• Virtual host configuration\n• SSL certificates\n\nThis action cannot be undone!`)) {
                showAlert('Deleting domain...', 'info');
                
                const formData = new FormData();
                formData.append('domain', domain);
                
                fetch('?ajax=delete_domain', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert(data.message, 'success');
                        loadDomains();
                    } else {
                        showAlert(data.message, 'error');
                    }
                })
                .catch(error => {
                    showAlert('Error deleting domain: ' + error.message, 'error');
                });
            }
        }

        function bulkCreateDomains(domains) {
            showAlert('Creating domains in bulk...', 'info');
            
            const formData = new FormData();
            formData.append('domains', domains);
            
            fetch('?ajax=bulk_create', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                showAlert(data.message, data.success ? 'success' : 'error');
                document.getElementById('bulk-domains').value = '';
                loadDomains();
            })
            .catch(error => {
                showAlert('Error creating domains: ' + error.message, 'error');
            });
        }

        // PHP Version functions
        function loadPHPVersions() {
            showLoading('php-loading');
            
            fetch('?ajax=domains')
                .then(response => response.json())
                .then(data => {
                    renderPHPVersions(data);
                    hideLoading('php-loading');
                })
                .catch(error => {
                    console.error('Error loading PHP versions:', error);
                    hideLoading('php-loading');
                });
        }

        function renderPHPVersions(domains) {
            const container = document.getElementById('php-domains-list');
            container.innerHTML = '';

            if (domains.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #666; padding: 40px;">No domains found.</p>';
                return;
            }

            domains.forEach(domain => {
                const phpItem = document.createElement('div');
                phpItem.className = 'domain-item';
                phpItem.innerHTML = `
                    <div class="domain-info">
                        <div class="domain-name">${domain.name}</div>
                        <div class="php-version-selector">
                            <label>Current: ${domain.php_version}</label>
                            <select id="php-${domain.name}" onchange="changePHPVersionSingle('${domain.name}', this.value)">
                                <option value="">Change to...</option>
                                <option value="73">PHP 7.3</option>
                                <option value="74">PHP 7.4</option>
                                <option value="80">PHP 8.0</option>
                                <option value="81">PHP 8.1</option>
                                <option value="82">PHP 8.2</option>
                            </select>
                        </div>
                    </div>
                `;
                container.appendChild(phpItem);
            });
        }

        function changePHPVersionBulk() {
            const phpVersion = document.getElementById('bulk-php-version').value;
            
            if (confirm(`🐘 Are you sure you want to change PHP version to ${phpVersion} for ALL domains?\n\nThis will:\n• Update all virtual host configurations\n• Restart LiteSpeed server\n• May cause temporary downtime\n\nContinue?`)) {
                showAlert(`Changing PHP version to ${phpVersion} for all domains...`, 'info');
                
                const formData = new FormData();
                formData.append('php_version', phpVersion);
                formData.append('domains', 'all');
                
                fetch('?ajax=change_php_bulk', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    showAlert(data.message, data.success ? 'success' : 'error');
                    if (data.success) {
                        loadDomains();
                        loadPHPVersions();
                    }
                })
                .catch(error => {
                    showAlert('Error changing PHP version: ' + error.message, 'error');
                });
            }
        }

        function changePHPVersionSingle(domain, version) {
            if (!version) return;
            
            showAlert(`Changing PHP version for ${domain}...`, 'info');
            
            const formData = new FormData();
            formData.append('domain', domain);
            formData.append('php_version', version);
            
            fetch('?ajax=change_php_single', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                showAlert(data.message, data.success ? 'success' : 'error');
                if (data.success) {
                    loadDomains();
                    loadPHPVersions();
                }
            })
            .catch(error => {
                showAlert('Error changing PHP version: ' + error.message, 'error');
            });
        }

        // Services functions
        function loadServices() {
            showLoading('services-loading');
            
            fetch('?ajax=services')
                .then(response => response.json())
                .then(data => {
                    servicesData = data;
                    renderServices(data);
                    hideLoading('services-loading');
                })
                .catch(error => {
                    console.error('Error loading services:', error);
                    hideLoading('services-loading');
                });
        }

        function renderServices(services) {
            const container = document.getElementById('services-list');
            container.innerHTML = '';

            Object.entries(services).forEach(([service, status]) => {
                const serviceItem = document.createElement('div');
                serviceItem.className = 'service-item';
                serviceItem.innerHTML = `
                    <div class="service-status">
                        <span class="status-dot ${status === 'running' ? 'status-running' : 'status-stopped'}"></span>
                        <strong>${service.toUpperCase()}</strong>
                        <span>(${status})</span>
                    </div>
                    <div>
                        <button class="btn btn-primary" onclick="restartService('${service}')">🔄 Restart</button>
                    </div>
                `;
                container.appendChild(serviceItem);
            });
        }

        function restartService(service) {
            showAlert(`Restarting ${service}...`, 'info');
            
            const formData = new FormData();
            formData.append('service', service);
            
            fetch('?ajax=restart_service', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                showAlert(data.message, data.success ? 'success' : 'error');
                setTimeout(() => loadServices(), 2000);
            })
            .catch(error => {
                showAlert('Error restarting service: ' + error.message, 'error');
            });
        }

        function restartLiteSpeed() {
            restartService('lsws');
        }

        // File Manager functions
        function loadFileManager() {
            const container = document.getElementById('file-manager-container');
            container.innerHTML = '<p>Setting up file manager with proxy authentication...</p>';
            
            fetch('?ajax=get_file_manager_url')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const iframe = document.createElement('iframe');
                        iframe.className = 'file-manager-embed';
                        iframe.src = data.url;
                        iframe.title = 'File Manager';
                        
                        // Set proxy header for authentication
                        const proxyUser = data.username;
                        console.log('File manager configured with proxy user:', proxyUser);
                        
                        container.innerHTML = '';
                        container.appendChild(iframe);
                        
                        showAlert('File manager loaded with proxy authentication', 'success');
                    } else {
                        container.innerHTML = '<p style="color: #e53e3e;">Failed to load file manager</p>';
                    }
                })
                .catch(error => {
                    console.error('Error loading file manager:', error);
                    container.innerHTML = '<p style="color: #e53e3e;">Error loading file manager</p>';
                });
        }

        // SSL Certificate functions
        function loadSSLCerts() {
            loadDomains();
        }

        function populateSSLDomains(domains) {
            const select = document.getElementById('ssl-domain');
            select.innerHTML = '<option value="">Select domain...</option>';
            
            domains.forEach(domain => {
                const option = document.createElement('option');
                option.value = domain.name;
                option.textContent = domain.name;
                select.appendChild(option);
            });
            
            renderSSLDomains(domains);
        }

        function renderSSLDomains(domains) {
            const container = document.getElementById('ssl-domains-list');
            container.innerHTML = '';

            domains.forEach(domain => {
                const sslItem = document.createElement('div');
                sslItem.className = 'domain-item';
                sslItem.innerHTML = `
                    <div class="domain-info">
                        <div class="domain-name">${domain.name}</div>
                        <div class="domain-meta">
                            ${domain.ssl ? '<span class="ssl-badge">🔒 SSL Active</span>' : '<span class="status-badge status-inactive">❌ No SSL</span>'}
                        </div>
                    </div>
                    <div class="domain-actions">
                        <button class="btn btn-success" onclick="generateSSL('${domain.name}')">🔒 Generate SSL</button>
                    </div>
                `;
                container.appendChild(sslItem);
            });
        }

        function generateSSL(domain) {
            showAlert(`Generating SSL certificate for ${domain}...`, 'info');
            
            const formData = new FormData();
            formData.append('domain', domain);
            
            fetch('?ajax=ssl_cert', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                showAlert(data.message, data.success ? 'success' : 'error');
                if (data.success) {
                    loadDomains();
                }
            })
            .catch(error => {
                showAlert('Error generating SSL certificate: ' + error.message, 'error');
            });
        }

        // Logs functions
        function loadLogs() {
            const logType = document.getElementById('log-type').value;
            const container = document.getElementById('logs-content');
            container.textContent = 'Loading logs...';
            
            // Simulate log loading with sample data
            setTimeout(() => {
                const sampleLogs = {
                    'lsws': `[INFO] ${new Date().toISOString()} LiteSpeed server started successfully
[ERROR] ${new Date().toISOString()} Virtual host configuration error for domain example.com
[WARN] ${new Date().toISOString()} High memory usage detected: 85%
[INFO] ${new Date().toISOString()} SSL certificate renewed for domain test.com
[ERROR] ${new Date().toISOString()} Failed to connect to backend server`,
                    
                    'lsws-access': `192.168.1.1 - - [${new Date().toLocaleDateString()}:${new Date().toLocaleTimeString()} +0000] "GET / HTTP/1.1" 200 1234 "-" "Mozilla/5.0"
192.168.1.2 - - [${new Date().toLocaleDateString()}:${new Date().toLocaleTimeString()} +0000] "GET /favicon.ico HTTP/1.1" 404 0 "-" "Mozilla/5.0"
192.168.1.3 - - [${new Date().toLocaleDateString()}:${new Date().toLocaleTimeString()} +0000] "POST /api/login HTTP/1.1" 200 512 "-" "curl/7.68.0"`,
                    
                    'system': `${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()} server systemd[1]: Started LiteSpeed HTTP Server
${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()} server kernel: Out of memory: Kill process 1234 (php-fpm)
${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()} server systemd[1]: Reloading OpenLiteSpeed HTTP Server`,
                    
                    'php': `[${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}] PHP Fatal error: Uncaught Error: Call to undefined function in /home/example.com/public_html/index.php:25
[${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}] PHP Warning: Division by zero in /home/test.com/public_html/calc.php:15
[${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}] PHP Notice: Undefined variable: user_id in /home/demo.com/public_html/login.php:42`
                };
                
                container.textContent = sampleLogs[logType] || 'No logs available for this type';
            }, 1000);
        }

        function clearLogs() {
            if (confirm('🗑️ Are you sure you want to clear the logs?\n\nThis action cannot be undone!')) {
                showAlert('Logs cleared successfully', 'success');
                document.getElementById('logs-content').textContent = 'Logs cleared...';
            }
        }

        // Utility functions
        function showAlert(message, type) {
            const container = document.getElementById('alert-container');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type === 'error' ? 'error' : 'success'} show`;
            alert.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: inherit; cursor: pointer; font-size: 18px;">&times;</button>
                </div>
            `;
            
            container.appendChild(alert);
            
            // Auto-remove after 8 seconds
            setTimeout(() => {
                if (alert.parentElement) {
                    alert.remove();
                }
            }, 8000);
        }

        function showLoading(id) {
            const element = document.getElementById(id);
            if (element) {
                element.classList.add('show');
            }
        }

        function hideLoading(id) {
            const element = document.getElementById(id);
            if (element) {
                element.classList.remove('show');
            }
        }

        // Auto-refresh functionality
        function startAutoRefresh() {
            setInterval(() => {
                if (currentSection === 'dashboard') {
                    loadStats();
                } else if (currentSection === 'services') {
                    loadServices();
                }
            }, 15000); // Refresh every 15 seconds
        }

        // Initialize auto-refresh
        startAutoRefresh();

        // Mobile menu toggle
        function toggleMobileMenu() {
            const sidebar = document.querySelector('.sidebar');
            sidebar.classList.toggle('open');
        }

        // Add mobile menu button for responsive design
        if (window.innerWidth <= 768) {
            const header = document.querySelector('.header h1');
            header.innerHTML = `
                <button onclick="toggleMobileMenu()" style="background: none; border: none; color: white; font-size: 24px; margin-right: 10px;">☰</button>
                🚀 Custom Server Panel
            `;
        }

        // Close mobile menu when clicking outside
        document.addEventListener('click', function(e) {
            const sidebar = document.querySelector('.sidebar');
            const menuButton = document.querySelector('button[onclick="toggleMobileMenu()"]');
            
            if (window.innerWidth <= 768 && sidebar.classList.contains('open') && 
                !sidebar.contains(e.target) && !menuButton?.contains(e.target)) {
                sidebar.classList.remove('open');
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey) {
                switch(e.key) {
                    case '1':
                        e.preventDefault();
                        showSection('dashboard');
                        break;
                    case '2':
                        e.preventDefault();
                        showSection('domains');
                        break;
                    case '3':
                        e.preventDefault();
                        showSection('php-versions');
                        break;
                    case '4':
                        e.preventDefault();
                        showSection('services');
                        break;
                    case '5':
                        e.preventDefault();
                        showSection('file-manager');
                        break;
                }
            }
        });

        // Add tooltips for better UX
        function addTooltips() {
            const tooltips = {
                'dashboard': 'View system overview and statistics',
                'domains': 'Manage your domains and websites',
                'php-versions': 'Change PHP versions for domains',
                'services': 'Manage system services',
                'file-manager': 'Browse and manage files',
                'ssl-certs': 'Manage SSL certificates',
                'system-logs': 'View system and application logs'
            };

            document.querySelectorAll('.nav-link').forEach(link => {
                const section = link.dataset.section;
                if (tooltips[section]) {
                    link.title = tooltips[section];
                }
            });
        }

        // Initialize tooltips
        addTooltips();

        // Enhanced error handling
        window.addEventListener('error', function(e) {
            console.error('JavaScript error:', e.error);
            showAlert('An unexpected error occurred. Please refresh the page.', 'error');
        });

        // Handle fetch errors globally
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
            return originalFetch.apply(this, args)
                .catch(error => {
                    console.error('Network error:', error);
                    showAlert('Network error. Please check your connection.', 'error');
                    throw error;
                });
        };

        console.log('🚀 Custom Server Panel loaded successfully!');
        console.log('📝 Keyboard shortcuts:');
        console.log('   Ctrl+1: Dashboard');
        console.log('   Ctrl+2: Domains');
        console.log('   Ctrl+3: PHP Versions');
        console.log('   Ctrl+4: Services');
        console.log('   Ctrl+5: File Manager');
    </script>
</body>
</html>
